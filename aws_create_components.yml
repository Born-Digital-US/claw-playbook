- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.medium
    security_group: PROD-ASU-IP-ALL
    image: ami-06d51e91cea0dac8d
    keypair: ASU-LIB-EC2-General
    region: us-west-2
    dr_region: us-east-1
    count: 1
    prefix: islandora-
    private_subnet: subnet-0e93560dfb1864c2d 
    public_subnet_a: subnet-07f370cafffaa5206
    public_subnet_b: subnet-021ff3f60cc4e56f6
    vpc_id: vpc-09949d0d16ed55e42
    asu_vpn_ip_1: 172.31.32.0/20
    asu_vpn_ip_2: 172.31.16.0/20
    star_lib_cert: "arn:aws:acm:us-west-2:141031099449:certificate/e44158ad-91d3-4ad6-8f32-71144459dde9"
    rds_subnet: "lib-prod-rds-private"
  vars_files:
    - aws_keys_prod.yml
    - inventory/prod/group_vars/all/passwords.yml
  tasks:
    - name: get the webserver IP
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:repository_purpose": "{{ prefix }}split"
          "tag:Name": "{{ prefix }}webserver"
      register: webserver_instances
    
    - name: get the landing IP
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:repository_purpose": "{{ prefix }}split"
          "tag:Name": "{{ prefix }}landing"
      register: landing_instances

    - name: get the services server IP
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:repository_purpose": "{{ prefix }}split"
          "tag:Name": "{{ prefix }}services"
      register: services_instances

    - name: create webserver ec2
      ec2:
        key_name: "{{ keypair }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        count: "{{ count }}"
        vpc_subnet_id: "{{private_subnet}}"
        assign_public_ip: no
        instance_tags:
          repository_purpose: "{{ prefix }}split"
          Name: "{{ prefix }}{{ item }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
      with_items:
        - "webserver"
      register: webserver_instances # ec2-web
      when: webserver_instances.instances|length < 1

    - name: get the webserver IP
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:repository_purpose": "{{ prefix }}split"
          "tag:Name": "{{ prefix }}webserver"
      register: webserver_instances

    - name: debug
      debug:
        var: webserver_instances.instances[0].private_ip_address

    - name: make webserver ip string
      set_fact:
        web_priv_ip: "{{ webserver_instances.instances[0].private_ip_address }}/32"

    - name: create services ec2
      ec2:
        key_name: "{{ keypair }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        count: "{{ count }}"
        vpc_subnet_id: "{{ private_subnet }}"
        assign_public_ip: no
        instance_tags:
          repository_purpose: "{{ prefix }}split"
          Name: "{{ prefix }}{{ item }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
      with_items:
        - "services"
      register: ec2-services
      when: services_instances.instances|length < 1

    - name: get the services server IP
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:repository_purpose": "{{ prefix }}split"
          "tag:Name": "{{ prefix }}services"
      register: services_instances

    - name: make services ip string
      set_fact:
        services_priv_ip: "{{ services_instances.instances[0].private_ip_address }}/32"  

    - name: create landing ec2
      ec2:
        key_name: "{{ keypair }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        count: "{{ count }}"
        vpc_subnet_id: "{{ private_subnet }}"
        assign_public_ip: no
        instance_tags:
          repository_purpose: "{{ prefix }}split"
          Name: "{{ prefix }}{{ item }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
      with_items:
        - "landing"
      register: ec2-landing
      when: landing_instances.instances|length < 1

    - name: get the landing IP
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:repository_purpose": "{{ prefix }}split"
          "tag:Name": "{{ prefix }}landing"
      register: landing_instances

    - name: make landing ip string
      set_fact:
        landing_priv_ip: "{{ landing_instances.instances[0].private_ip_address }}/32"

    - name: check for elb webserver security group
      ec2_group_facts:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        filters:
          "group-name": "{{ prefix }}webserver-elb"
      register: elb_webserver_security_group

    - name: check for elb landing security group
      ec2_group_facts:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        filters:
          "group-name": "{{ prefix }}landing-elb"
      register: elb_landing_security_group

    - name: create elb webserver security group
      ec2_group:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        description: "security group for islandora webserver elb"
        name: "{{ prefix }}webserver-elb"
        vpc_id: "{{ vpc_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
      register: elb_webserver_security_group

    - name: create elb landing security group
      ec2_group:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        description: "security group for islandora landing elb"
        name: "{{ prefix }}landing-elb"
        vpc_id: "{{ vpc_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
      register: elb_landing_security_group

    - name: check for webserver security group
      ec2_group_facts:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        filters:
          "group-name": "{{ prefix}}webserver"
      register: webserver_security_group

    - name: create webserver security group
      ec2_group:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        description: "security group for islandora webserver"
        name: "{{ prefix}}webserver"
        vpc_id: "{{ vpc_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            group_id: "{{ elb_webserver_security_group.group_id }}"
          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: "{{web_priv_ip}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip:
              - "{{ asu_vpn_ip_1 }}"
              - "{{ asu_vpn_ip_2 }}"
      register: webserver_security_group

    - name: check for landing security group
      ec2_group_facts:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        filters:
          "group-name": "{{ prefix}}landing"
      register: landing_security_group

    - name: create landing security group
      ec2_group:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        description: "security group for islandora landing"
        name: "{{ prefix}}landing"
        vpc_id: "{{ vpc_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            group_id: "{{ elb_landing_security_group.group_id }}"
          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: "{{landing_priv_ip}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip:
              - "{{ asu_vpn_ip_1 }}"
              - "{{ asu_vpn_ip_2 }}"
      register: landing_security_group

    - name: assign webserver security group
      ec2:
        state: running
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        instance_ids:
          - "{{ webserver_instances.instances[0].instance_id }}"
        region: "{{ region }}"
        groups:
          - "{{ webserver_security_group.group_name }}"
          # - "{{ security_group }}"

    - name: assign landing security group
      ec2:
        state: running
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        instance_ids:
          - "{{ landing_instances.instances[0].instance_id }}"
        region: "{{ region }}"
        groups:
          - "{{ landing_security_group.group_name }}"
          # - "{{ security_group }}"

    - name: create webserver ELB target group
      elb_target_group:
        name: "{{ prefix}}webserver-target"
        protocol: https
        port: 443
        state: present
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        vpc_id: "{{ vpc_id }}"
        health_check_path: /
        successful_response_codes: "200"
        targets:
          - Id: "{{ webserver_instances.instances[0].instance_id }}"
            Port: 443
      register: elb_web_target_group

    - name: create webserver ELB - this is keep.lib.asu.edu
      elb_application_lb:
        name: "{{ prefix }}webserver-elb"
        state: present
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        subnets:
          - "{{ public_subnet_a }}"
          - "{{ public_subnet_b }}"
        security_groups:
          - "{{ elb_webserver_security_group.group_id }}"
        listeners:
          # this did not work through ansible - had to go in to UI and create a listener on the ELB 
          # to forward port 80 to 443 HTTPS
          # - Protocol: HTTP # options are http, https, ssl, tcp
          #   Port: 80
          #   DefaultActions:
          #     - Type: redirect # Required.
          #       TargetGroupName: "{{ elb_web_target_group.results[0].target_group_name }}"
          #       RedirectConfig:
          #         # https://#{host}:443/#{path}?#{query}
          #         Host: "#{host}"
          #         Path: "#{path}"
          #         Port: 443
          #         Query: "#{query}"
          #         Protocol: "https"
          #         StatusCode: "HTTP_301"
          - Protocol: HTTPS
            Port: 443
            SslPolicy: ELBSecurityPolicy-2016-08
            Certificates:
              - CertificateArn: "{{ star_lib_cert }}"
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ elb_web_target_group.results[0].target_group_name }}"

    - name: create landing ELB target group
      elb_target_group:
        name: "{{ prefix}}landing-target"
        protocol: https
        port: 443
        state: present
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        vpc_id: "{{ vpc_id }}"
        health_check_path: /
        successful_response_codes: "200"
        targets:
          - Id: "{{ landing_instances.instances[0].instance_id }}"
            Port: 443
      register: elb_landing_target_group


    - name: create landing ELB - this is repository.lib.asu.edu
      elb_application_lb:
        name: "{{ prefix }}landing-elb"
        state: present
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        subnets:
          - "{{ public_subnet_a }}"
          - "{{ public_subnet_b }}"
        security_groups:
          - "{{ elb_landing_security_group.group_id }}"
        listeners:
          # this did not work through ansible - had to go in to UI and create a listener on the ELB 
          # to forward port 80 to 443 HTTPS
          # - Protocol: HTTP # options are http, https, ssl, tcp
          #   Port: 80
          #   DefaultActions:
          #     - Type: redirect # Required.
          #       TargetGroupName: "{{ elb_web_target_group.results[0].target_group_name }}"
          #       RedirectConfig:
          #         # https://#{host}:443/#{path}?#{query}
          #         Host: "#{host}"
          #         Path: "#{path}"
          #         Port: 443
          #         Query: "#{query}"
          #         Protocol: "https"
          #         StatusCode: "HTTP_301"
          - Protocol: HTTPS
            Port: 443
            SslPolicy: ELBSecurityPolicy-2016-08
            Certificates:
              - CertificateArn: "{{ star_lib_cert }}"
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ elb_landing_target_group.results[0].target_group_name }}"

    - name: check for services security group
      ec2_group_facts:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        filters:
          "group-name": "{{ prefix}}services"
      register: services_security_group
    
    - name: create services security group
      ec2_group:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        description: "security group for islandora services server"
        name: "{{ prefix}}services"
        vpc_id: "{{ vpc_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
        rules:
          # - proto: tcp
          #   ports:
          #     - 8080 # tomcat
          #     - 8161 # activemq
          #     - 61613 # activemq
          #     - 61616 # activemq / karaf
          #     - 8983 # solr
          #     - 80 # apache
          #     - 443 # apache
          #   cidr_ip:
          #     - "{{ asu_vpn_ip_1 }}" #ASU VPN 1
          #     - "{{ asu_vpn_ip_1 }}" #ASU VPN 2
          #     - 149.169.0.0/16 #ASU PUBLIC 1
          #     - 129.219.0.0/16 #ASU PUBLIC 2
          #     - 209.147.128.0/18 #ASU PUBLIC 3
          #     # - 10.192.36.190/32 #private IP
          #     # - "{{web_priv_ip}}" #private IP services
          #     # - 52.25.225.253/32 #ELB
          #     # - 35.167.139.18/32 #ELB
          #     - 34.208.70.8/32 # new public IP of webserver
          #     # - 35.163.77.215/32 #webserver IP
          #     - 98.177.147.219/32 #eli at home
          # - proto: tcp # this might not be needed since its all on the private subnet
            # ports: 3306 # mysql
            # cidr_ip:
              # - 10.192.36.190/32
          # - proto: all
            # cidr_ip: 
              # - "{{ web_priv_ip }}" #webserver
              # - "{{ services_priv_ip }}" #itself 
              # - 52.25.225.253/32 # ELB of webserver
              # - 35.167.139.18/32 # ELB of webserver
              # we think it might just be the 10.192.*
              # with restrict it to the webserver security group
              # and possibly the public IPs of the ELB
              # plus whatever small group of humans (devs) need to access
          - proto: all
            group_id: "{{ elb_webserver_security_group.group_id }}"
          - proto: all
            group_id: "{{ webserver_security_group.group_id }}"
          - proto: all
            cidr_ip:
              - 10.192.0.0/16
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip:
              - "{{ asu_vpn_ip_1 }}"
              - "{{ asu_vpn_ip_2 }}"
      register: services_security_group

    - name: assign services security group
      ec2:
        state: running
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        instance_ids:
          - "{{ item.instance_id }}"
        region: "{{ region }}"
        groups:
          - "{{ services_security_group.group_name }}"
          # - "{{ security_group }}"
      with_items: "{{ services_instances.instances }}"

    - name: Ensure digitalrepository@asu.edu email identity exists
      aws_ses_identity:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        identity: digitalrepository@asu.edu
        state: present

    - name: create rds parameter group
      rds_param_group:
        state: present
        name: "{{prefix}}mysql-5.7-params"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        description: "Custom Params for Islandora Mysql 5.7"
        engine: 'mysql5.7'
        params:
          max_allowed_packets: 1073741824
        tags:
          Application: islandora

    - name: check for Drupal web RDS
      rds_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        id: "{{ prefix }}drupal"
      register: drupal_rds_instance

    - name: create Drupal web RDS
      rds:
        command: create
        instance_name: "{{ prefix }}drupal"
        db_engine: MySQL
        size: 10
        instance_type: db.t2.micro
        username: drupal8
        db_name: drupal8
        password: "{{ drupal_db_password }}"
        vpc_security_groups: "{{ webserver_security_group.group_id }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        engine_version: 5.7.30
        subnet: "{{ rds_subnet }}"
        parameter_group: "{{prefix}}mysql-5.7-params"
        tags:
          Application: islandora
      when: drupal_rds_instance.instances|length < 1

    - name: check for Drupal landing RDS
      rds_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        id: "{{ prefix }}landing-drupal"
      register: drupal_landing_rds_instance

    - name: create Drupal landing RDS
      rds:
        command: create
        instance_name: "{{ prefix }}landing-drupal"
        db_engine: MySQL
        size: 10
        instance_type: db.t2.micro
        username: drupal8
        db_name: drupal8
        password: "{{ drupal_db_password }}"
        vpc_security_groups: "{{ landing_security_group.group_id }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        engine_version: 5.7.30
        subnet: "{{ rds_subnet }}"
        parameter_group: "{{prefix}}mysql-5.7-params"
        tags:
          Application: islandora
      when: drupal_landing_rds_instance.instances|length < 1

    - name: check for Fedora RDS
      rds_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        id: "{{ prefix }}fedora"
      register: fedora_rds_instance

    - name: create Fedora RDS
      rds:
        command: create
        instance_name: "{{ prefix }}fedora"
        db_engine: MySQL
        size: 10
        instance_type: db.t2.micro
        username: fcrepo
        db_name: fcrepo
        password: "{{ fcrepo_db_password }}"
        vpc_security_groups: "{{ services_security_group.group_id }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        subnet: "{{ rds_subnet }}"
        tags:
          Application: islandora
      when: fedora_rds_instance.instances|length < 1

    - name: check for Matomo RDS
      rds_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        id: "{{ prefix }}matomo"
      register: matomo_rds_instance

    - name: create Matomo RDS
      rds:
        command: create
        instance_name: "{{ prefix }}matomo"
        db_engine: MySQL
        size: 10
        instance_type: db.t2.micro
        username: matomo
        db_name: matomo
        password: "{{ matomo_db_password }}"
        vpc_security_groups: "{{ webserver_security_group.group_id }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        subnet: "{{ rds_subnet }}"
        tags:
          Application: islandora
      when: matomo_rds_instance.instances|length < 1

    - name: check for gemini RDS
      rds_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        id: "{{ prefix }}gemini"
      register: gemini_rds_instance

    - name: create gemini RDS
      rds:
        command: create
        instance_name: "{{ prefix }}gemini"
        db_engine: MySQL
        size: 10
        instance_type: db.t2.micro
        username: crayfish
        db_name: gemini
        password: "{{ crayfish_db_password }}"
        vpc_security_groups: "{{ services_security_group.group_id }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        subnet: "{{ rds_subnet }}"
        tags:
          Application: islandora
      when: gemini_rds_instance.instances|length < 1

    - name: check for bags s3
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}preservation-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}preservation-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
            region: "{{ region }}"
            state: present
            versioning: yes
  
    - name: check for fedora s3
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}fcrepo-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}fcrepo-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
            region: "{{ region }}"
            state: present
            versioning: yes

    - name: check for webserver drupal filesystem s3
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}drupal-ir-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}drupal-ir-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
            region: "{{ region }}"
            state: present
            versioning: yes

    - name: check for landing drupal filesystem s3
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}drupal-landing-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}drupal-landing-bucket"
            aws_secret_key: "{{ aws_secret_key }}"
            aws_access_key: "{{ aws_access_key }}"
            region: "{{ region }}"
            state: present
            versioning: yes

    - name: check for bags s3 in disaster recovery
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}preservation-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}preservation-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
            region: "{{dr_region}}"
            state: present
            versioning: yes

    - name: check for fedora s3 in disaster recovery
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}fcrepo-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}fcrepo-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
            region: "{{dr_region}}"
            state: present
            versioning: yes

    - name: check for drupal webserver filesystem s3 in disaster recovery
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}drupal-ir-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}drupal-ir-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
            region: "{{dr_region}}"
            state: present
            versioning: yes

    - name: check for drupal landing filesystem s3 in disaster recovery
      block:
        - aws_s3:
            mode: list
            bucket: "{{ prefix }}drupal-landing-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
      rescue:
        - s3_bucket:
            name: "{{ prefix }}drupal-landing-dr-bucket"
            aws_secret_key: "{{ aws_dr_secret_key }}"
            aws_access_key: "{{ aws_dr_access_key }}"
            region: "{{dr_region}}"
            state: present
            versioning: yes

    - name: create an iam user for s3 access
      iam:
        iam_type: user
        name: "{{ prefix }}s3-user"
        state: present



# note that replication rules to push s3 -> dr s3 were done manually in the aws console
          # entire bucket replicate to DR account with storage class Glacier
# note that lifecycle rules to push standard to intelligent tiering done manually in the aws console
          # entire bucket Transition to Intelligent-Tiering after 1 day
# note that elb redirect from 80 -> 443 done manually in the aws console
# note that SMTP credentials were created manually under SES > SMTP Settings and need to be added
          # to the aws_keys_prod.yml prior to playbook.yml deploy
# note that the keypair for the iam user for s3 will need to be extracted through the UI


